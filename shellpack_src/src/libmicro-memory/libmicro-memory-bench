#!/bin/bash
###SHELLPACK preamble libmicro-memory-bench 1

###SHELLPACK parseargBegin
###SHELLPACK parseargInstall
###SHELLPACK parseargEnd

###SHELLPACK check_install_required libmicro-memory-${VERSION}

###SHELLPACK monitor_hooks

cd $SHELLPACK_SOURCES/libmicro-memory-${VERSION}-installed || die Failed to cd to libmicro directory

COMMON="-E -C 2000 -L -S -W"

TMPROOT=/tmp/libmicro.$$
VARROOT=/var/tmp/libmicro.$$
mkdir -p $TMPROOT
mkdir -p $VARROOT
trap "rm -rf $TMPROOT $VARROOT" 0 2

TFILE=$TMPROOT/data
VFILE=$VARROOT/data
dd if=/dev/zero of=$TFILE bs=1024k count=10 2>/dev/null
dd if=/dev/zero of=$VFILE bs=1024k count=10 2>/dev/null

while read A B C; do
	monitor_pre_hook $LOGDIR_RESULTS $B
	if [ -f bin/$A ]; then
		eval bin/$A $COMMON -N "$B" $C 2>&1 > $LOGDIR_RESULTS/$B.log
	fi
	monitor_post_hook $LOGDIR_RESULTS $B
done <<EOT
memset	memset_10	-s 10	-B 10000
memset	memset_256	-s 256	-B 10000
memset	memset_256_u	-s 256	 -a 1 -B 10000
memset	memset_1k	-s 1k	 -B 10000
memset	memset_4k	-s 4k -B 10000
memset	memset_4k_uc	-s 4k -u -B 10000
memset	memset_10k	-s 10k	-B 10000
memset	memset_1m	-s 1m	-B 10000
memset	memset_10m	-s 10m -B 10000
memset	memsetP2_10m	-s 10m -P 2 -B 10000
memrand	memrand	-s 128m -B 10000
cachetocache	cachetocache	-s 100k -T 2 -B 10000
malloc	malloc_10	-s 10 -g 10 -B 10000
malloc	malloc_100	-s 100 -g 10 -B 10000
malloc	malloc_1k	-s 1k -g 10 -B 10000
malloc	malloc_10k	-s 10k -g 10 -B 10000
malloc	malloc_100k	-s 100k -g 10 -B 10000
malloc	mallocT2_10	-s 10 -g 10 -T 2 -B 10000
malloc	mallocT2_100	-s 100 -g 10 -T 2 -B 10000
malloc	mallocT2_1k	-s 1k -g 10 -T 2 -B 10000
malloc	mallocT2_10k	-s 10k -g 10 -T 2 -B 10000
malloc	mallocT2_100k	-s 100k -g 10 -T 2 -B 10000
memcpy	memcpy_10	-s 10	-B 10000
memcpy	memcpy_1k	-s 1k	-B 10000
memcpy	memcpy_10k	-s 10k	-B 10000
memcpy	memcpy_1m	-s 1m -B 10000
memcpy	memcpy_10m	-s 10m -B 10000
strcpy	strcpy_10	-s 10 -B 10000
strcpy	strcpy_1k	-s 1k -B 10000
strlen	strlen_10	-s 10 -B 10000
strlen	strlen_1k	-s 1k -B 10000
strchr	strchr_10	-s 10 -B 10000
strchr	strchr_1k	-s 1k -B 10000
strcmp	strcmp_10	-s 10 -B 10000
strcmp	strcmp_1k	-s 1k -B 10000
strcasecmp	scasecmp_10	-s 10 -B 10000
strcasecmp	scasecmp_1k	-s 1k -B 10000
cascade_lockf	c_lockf_1	-B 10000
cascade_lockf	c_lockf_10	-P 10 -B 10000
cascade_lockf	c_lockf_200	-P 200 -B 10000
cascade_flock	c_flock	-B 10000
cascade_flock	c_flock_10	-P 10 -B 10000
cascade_flock	c_flock_200	-P 200	-B 10000
cascade_fcntl	c_fcntl_1	-B 10000
cascade_fcntl	c_fcntl_10	-P 10 -B 10000
cascade_fcntl	c_fcntl_200	-P 200	-B 10000
mmap	mmap_z8k	-l 8k -B 10000		-f /dev/zero
mmap	mmap_z128k	-l 128k	-B 10000		-f /dev/zero
mmap	mmap_t8k	-l 8k	-B 10000		-f $TFILE
mmap	mmap_t128k	-l 128k	-B 10000		-f $TFILE
mmap	mmap_u8k	-l 8k	-B 10000		-f $VFILE
mmap	mmap_u128k	-l 128k	-B 10000		-f $VFILE
mmap	mmap_a8k	-l 8k	-B 10000		-f MAP_ANON
mmap	mmap_a128k	-l 128k	-B 10000		-f MAP_ANON
mmap	mmap_rz8k	-l 8k	-B 10000 -r	-f /dev/zero
mmap	mmap_rz128k	-l 128k	-B 10000 -r	-f /dev/zero
mmap	mmap_rt8k	-l 8k	-B 10000 -r	-f $TFILE
mmap	mmap_rt128k	-l 128k	-B 10000 -r	-f $TFILE
mmap	mmap_ru8k	-l 8k	-B 10000 -r	-f $VFILE
mmap	mmap_ru128k	-l 128k	-B 10000 -r	-f $VFILE
mmap	mmap_ra8k	-l 8k	-B 10000 -r	-f MAP_ANON
mmap	mmap_ra128k	-l 128k	-B 10000 -r	-f MAP_ANON
mmap	mmap_wz8k	-l 8k	-B 10000 -w	-f /dev/zero
mmap	mmap_wz128k	-l 128k	-B 10000 -w	-f /dev/zero
mmap	mmap_wt8k	-l 8k	-B 10000 -w	-f $TFILE
mmap	mmap_wt128k	-l 128k	-B 10000 -w	-f $TFILE
mmap	mmap_wu8k	-l 8k	-B 10000 -w	-f $VFILE
mmap	mmap_wu128k	-l 128k	-B 10000 -w	-f $VFILE
mmap	mmap_wa8k	-l 8k	-B 10000 -w	-f MAP_ANON
mmap	mmap_wa128k	-l 128k	-B 10000 -w	-f MAP_ANON
munmap	unmap_z8k	-l 8k -B 10000		-f /dev/zero
munmap	unmap_z128k	-l 128k	-B 10000		-f /dev/zero
munmap	unmap_t8k	-l 8k	-B 10000		-f $TFILE
munmap	unmap_t128k	-l 128k	-B 10000		-f $TFILE
munmap	unmap_u8k	-l 8k	-B 10000		-f $VFILE
munmap	unmap_u128k	-l 128k	-B 10000		-f $VFILE
munmap	unmap_a8k	-l 8k	-B 10000		-f MAP_ANON
munmap	unmap_a128k	-l 128k	-B 10000		-f MAP_ANON
munmap	unmap_rz8k	-l 8k	-B 10000	-r	-f /dev/zero
munmap	unmap_rz128k	-l 128k	-B 10000 -r	-f /dev/zero
munmap	unmap_rt8k	-l 8k	-B 10000	-r	-f $TFILE
munmap	unmap_rt128k	-l 128k	-B 10000	-r	-f $TFILE
munmap	unmap_ru8k	-l 8k	-B 10000	-r	-f $VFILE
munmap	unmap_ru128k	-l 128k	-B 10000	-r	-f $VFILE
munmap	unmap_ra8k	-l 8k	-B 10000	-r	-f MAP_ANON
munmap	unmap_ra128k	-l 128k	-B 10000	-r	-f MAP_ANON
munmap	unmap_wz8k	-l 8k	-B 10000	-w	-f /dev/zero
munmap	unmap_wz128k	-l 128k	-B 10000	-w	-f /dev/zero
munmap	unmap_wt8k	-l 8k	-B 10000	-w	-f $TFILE
munmap	unmap_wt128k	-l 128k	-B 10000	-w	-f $TFILE
munmap	unmap_wu8k	-l 8k	-B 10000	-w	-f $VFILE
munmap	unmap_wu128k	-l 128k	-B 10000	-w	-f $VFILE
munmap	unmap_wa8k	-l 8k	-B 10000	-w	-f MAP_ANON
munmap	unmap_wa128k	-l 128k	-B 10000	-w	-f MAP_ANON
mprotect	mprot_z8k	-l 8k -B 10000			-f /dev/zero
mprotect	mprot_z128k	-l 128k	-B 10000		-f /dev/zero
mprotect	mprot_wz8k	-l 8k	-B 10000	-w	-f /dev/zero
mprotect	mprot_wz128k	-l 128k	-B 10000	-w	-f /dev/zero
mprotect	mprot_twz8k	-l 8k -B 10000 -w -t -f /dev/zero
mprotect	mprot_tw128k	-l 128k -B 10000 -w -t -f /dev/zero
mprotect	mprot_tw4m	-l 4m -w -t -B 10000 -f /dev/zero
pipe	pipe_pst1	-s 1	-B 10000	-x pipe -m st
pipe	pipe_pmt1	-s 1	-B 10000	-x pipe -m mt
pipe	pipe_pmp1	-s 1	-B 10000	-x pipe -m mp
pipe	pipe_pst4k	-s 4k	-B 10000	-x pipe -m st
pipe	pipe_pmt4k	-s 4k	-B 10000	-x pipe -m mt
pipe	pipe_pmp4k	-s 4k	-B 10000	-x pipe -m mp
pipe	pipe_sst1	-s 1	-B 10000	-x sock -m st
pipe	pipe_smt1	-s 1	-B 10000	-x sock -m mt
pipe	pipe_smp1	-s 1	-B 10000	-x sock -m mp
pipe	pipe_sst4k	-s 4k	-B 10000	-x sock -m st
pipe	pipe_smt4k	-s 4k	-B 10000	-x sock -m mt
pipe	pipe_smp4k	-s 4k	-B 10000	-x sock -m mp
pipe	pipe_tst1	-s 1	-B 10000	-x tcp -m st
pipe	pipe_tmt1	-s 1	-B 10000	-x tcp -m mt
pipe	pipe_tmp1	-s 1	-B 10000	-x tcp -m mp
pipe	pipe_tst4k	-s 4k	-B 10000	-x tcp -m st
pipe	pipe_tmt4k	-s 4k	-B 10000	-x tcp -m mt
pipe	pipe_tmp4k	-s 4k	-B 10000	-x tcp -m mp
EOT

exit $SHELLPACK_SUCCESS
