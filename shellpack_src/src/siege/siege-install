#!/bin/bash
# siege installer
###SHELLPACK preamble siege-install 3.0.5


APACHE_VERSION=2.4.10

APR_VERSION=1.5.1
PCRE_VERSION=8.35

WEB_LOCATION=http://download.joedog.org/siege

MIRROR_LOCATION="$WEBROOT/siege/"

###SHELLPACK parseargBegin
###SHELLPACK parseargEnd

###SHELLPACK sources_fetch siege-${VERSION}.tar.gz siege-${VERSION}
if [ ! -e $SHELLPACK_SOURCES/apache-build-${APACHE_VERSION}-installed ]; then
	echo Installing apache server
	$SHELLPACK_INCLUDE/shellpack-install-apachebuild -v ${APACHE_VERSION} || die Failed to install apache httpd
	echo Apache server successfully installed.
fi

# Build
###SHELLPACK build_start siege-${VERSION}
###SHELLPACK build_configure siege-${VERSION}
echo '
--- src/client.c.orig	2014-08-12 12:53:53.082570615 +0000
+++ src/client.c	2014-08-12 12:55:04.162458115 +0000
@@ -209,7 +209,6 @@
   int      code, fail;  
   float    etime; 
   clock_t  start, stop;
-  struct   tms t_start, t_stop; 
   HEADERS  *head; 
 #ifdef  HAVE_LOCALTIME_R
   struct   tm keepsake;
@@ -250,7 +249,7 @@
   }
 
   /* record transaction start time */
-  start = times(&t_start);  
+  start = clock();
 
   if (! __init_connection(C, U, client)) return FALSE;
   
@@ -290,7 +289,7 @@
     echo ("%s:%d zero bytes back from server", __FILE__, __LINE__);
     return FALSE; 
   } 
-  stop     =  times(&t_stop); 
+  stop     =  clock(); 
   etime    =  elapsed_time(stop - start);  
   code     =  (head->code <  400 || head->code == 401 || head->code == 407) ? 1 : 0;
   fail     =  (head->code >= 400 && head->code != 401 && head->code != 407) ? 1 : 0; 
@@ -484,7 +483,6 @@
   CONN    *D    = NULL;  // FTP data connection 
   size_t  bytes = 0;     // bytes from server   
   clock_t start, stop;
-  struct  tms t_start, t_stop; 
 
   D = xcalloc(sizeof(CONN), 1);
   D->sock = -1;
@@ -498,7 +496,7 @@
     return FALSE;
   }
 
-  start = times(&t_start);
+  start = clock();
   if (C->sock < 0) {
     NOTIFY (
       ERROR, "%s:%d connection failed %s:%d",
@@ -561,7 +559,7 @@
 
   pass  = (bytes == C->ftp.size) ? 1 : 0;
   fail  = (pass  == 0) ? 1 : 0; 
-  stop  =  times(&t_stop);
+  stop  =  clock();
   etime =  elapsed_time(stop - start);
   client->bytes += bytes;
   client->time  += etime;
--- src/data.c.orig	2014-08-12 12:55:15.150439763 +0000
+++ src/data.c	2014-08-12 12:56:23.270283678 +0000
@@ -51,8 +51,6 @@
   float    elapsed;
   clock_t  start;   
   clock_t  stop;      
-  struct   tms  t_start; 
-  struct   tms  t_stop;
   unsigned int  code;
   unsigned int  count;
   unsigned int  ok200;
@@ -130,14 +128,14 @@
 void
 data_set_start(DATA this)
 {
-  this->start = times(&this->t_start);
+  this->start = clock();
   return;
 }
 
 void
 data_set_stop(DATA this)
 {
-  this->stop = times(&this->t_stop);
+  this->stop = clock();
   return;
 }
' | patch -p0 || die Failed to patch siege

###SHELLPACK make_make_install

echo Creating static test page
LINECOUNT=`wc -l $0 | awk '{print $1}'`
HTMLSTART=`grep -n "BEGIN HTML FILE" $0 | tail -1 | awk -F : '{print $1}'`
tail -$(($LINECOUNT-$HTMLSTART)) $0 | grep -v "^###" > $SHELLPACK_SOURCES/apachebuild-${APACHE_VERSION}-installed/htdocs/siege.html

cat > $HOME/.siegerc << EOF
verbose = false
quiet = true
gmethod = HEAD
show-logfile = true
logging = false
protocol = HTTP/1.1
chunked = true
cache = false
connection = close
concurrent = 500
file = $SHELLPACK_SOURCES/siege-${VERSION}-installed/etc/urls.txt
delay = 1
timeout = 40
failures = 10
internet = false
benchmark = false
user-agent = MMTests
accept-encoding = gzip
url-escaping = true
spinner = true
unique = true
EOF

echo siege successfully
exit $SHELLPACK_SUCCESS

==== BEGIN HTML FILE ====
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>siege dummy tester</title>
</head>
<body>
<h1>siege dummy tester</h1>

This is a basic HTML page with no useful information and serves as a static
web page for testing siege. Obviously more complex tests of the software
stack would require pages that exercise the system of interest.

Here is a text to bring the page size up to 1K.
Here is a text to bring the page size up to 1K.
Here is a text to bring the page size up to 1K.
Here is a bunch of text to bring the page size up to 1K.
Here is a bunch of text to bring the page size up to 1K.
Here is a bunch of text to bring the page size up to 1K.
Here is a bunch of text to bring the page size up to 1K.
Here is a bunch of text to bring the page size up to 1K.
Here is a bunch of text to bring the page size up to 1K.
<img src="http://www.w3.org/Icons/valid-html401" alt="Valid HTML 4.01 Transitional" height="31" width="88">
</p>
</body>
</html>
