#!/bin/bash
# Run a scenario with xfs_repair that bashes the VM in various different ways.
# The biggest factor is the amount it smacks the shrinker. Note that there may
# be different results based on the filesystem storing the disk image

P=xfsreair-bench
DEFAULT_VERSION=1
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi

FSMARK_VERSION=3.3
ITERATIONS=3
NR_THREADS=4

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--iterations)
		ITERATIONS=$2
		shift 2
		;;
	--threads)
		NR_THREADS=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

install-depends xfsprogs
if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/fsmark-$FSMARK_VERSION
fi
if [ ! -d $SHELLPACK_SOURCES/fsmark-$FSMARK_VERSION-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-fsmark -v $FSMARK_VERSION  || die fsmark install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/fsmark-$FSMARK_VERSION-installed || die Failed to cd to fsmark install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo fsmark installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

export PATH=$SHELLPACK_SOURCES/fsmark-${FSMARK_VERSION}-installed:$PATH

ln -s $SHELLPACK_DATA /tmp/fsmark-$$
IMAGE_SIZE=`df -k $SHELLPACK_DATA | tail -1 | awk '{print $2}'`
IMAGE_SIZE=$((IMAGE_SIZE*9/10))

# fsmark directory parameters
NR_SUB_DIRECTORIES=10000
NR_INODES=50000000
NR_FILES_ITERATION=500000
FSMARK_FILES=$(($NR_FILES_ITERATION/$NR_THREADS))
FSMARK_ITERATIONS=$((NR_INODES/NR_FILES_ITERATION))
PARAM=
for THREAD in `seq 1 $NR_THREADS`; do
	PARAM="$PARAM -d /tmp/fsmark-$$/mnt/$THREAD"
done

echo "Parameters"
echo "o nr_inodes         $NR_INODES"
echo "o nr_threads        $NR_THREADS"
echo "o nr_sub_dirs       $NR_SUB_DIRECTORIES"
echo "o total_files_iter  $NR_FILES_ITERATION"
echo "o fsmark_files_iter $FSMARK_FILES"
echo "o fsmark_iterations $FSMARK_ITERATIONS"

for ITERATION in `seq 1 $ITERATIONS`; do
	mmtests_activity iteration $ITERATION
echo Creating sparse file size $((IMAGE_SIZE/1024))MB $ITERATION/$ITERATIONS 
cd $SHELLPACK_DATA
$TIME_CMD -o $LOGDIR_RESULTS/time.sparsecreate.$ITERATION \
	xfs_io -f -c "truncate ${IMAGE_SIZE}k" -c "extsize 1m" $SHELLPACK_DATA/sparse.img || \
		die Failed to create sparse file
xfs_io -c stat $SHELLPACK_DATA/sparse.img | tee $LOGDIR_RESULTS/sparse.stat

echo Creating filesystem image $ITERATION/$ITERATIONS
$TIME_CMD -o $LOGDIR_RESULTS/time.fscreate.$ITERATION \
	mkfs.xfs -f -l size=131072b $SHELLPACK_DATA/sparse.img || \
		die Failed to create filesystem

echo Mounting $ITERATION/$ITERATIONS
mkdir mnt
mount -o loop,nobarrier,logbsize=256k $SHELLPACK_DATA/sparse.img mnt
if [ $? -ne 0 ]; then
	mount -o loop,logbsize=256k $SHELLPACK_DATA/sparse.img mnt ||
		die Failed to mount filesystem image
fi

echo Running fsmark $ITERATION/$ITERATIONS
monitor_pre_hook $LOGDIR_RESULTS fsmark-$ITERATION
eval save_rc time -o $LOGDIR_RESULTS/time.fsmark.$ITERATION \
	fs_mark  -D $NR_SUB_DIRECTORIES -S0 -n $FSMARK_FILES -s  0  -L $FSMARK_ITERATIONS $PARAM \
		2>&1 | tee $SHELLPACK_TEMP/fsmark.${ITERATION}.log
monitor_post_hook $LOGDIR_RESULTS fsmark-$ITERATION
umount mnt
recover_rc
if [ $? -ne 0 ]; then
	die fs_mark failed
fi

echo Repairing filesystem $ITERATION/$ITERATIONS
echo 3 > /proc/sys/vm/drop_caches
monitor_pre_hook $LOGDIR_RESULTS xfsrepair-$ITERATION
save_rc $TIME_CMD -o $LOGDIR_RESULTS/time.xfsrepair.$ITERATION \
	xfs_repair -v -v -t 1 -o bhash=32768 -o ag_stride=$NR_THREADS $SHELLPACK_DATA/sparse.img \
		2>&1 | tee $SHELLPACK_TEMP/xfsrepair.${ITERATION}.log
monitor_post_hook $LOGDIR_RESULTS xfsrepair-$ITERATION
recover_rc
if [ $? -ne 0 ]; then
	die xfsrepair failed
fi

rm $SHELLPACK_DATA/sparse.img
sync
done

rm /tmp/fsmark-$$

exit $SHELLPACK_SUCCESS
#### Description xfsrepair
#### Details xfsrepair-bench 31
