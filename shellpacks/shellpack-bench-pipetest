#!/bin/bash
# This is the script for running the pipetest benchmark
P=pipetest-bench
DEFAULT_VERSION=0
. $SHELLPACK_INCLUDE/common.sh
ITERATIONS=30

# Basic argument parser
while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	-i)
		iterations=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/pipetest
fi
if [ ! -d $SHELLPACK_SOURCES/pipetest-installed ]; then
	$SHELLPACK_INCLUDE/shellpack-install-pipetest -v ${VERSION} || die pipetest install script returned error
fi
cd $SHELLPACK_SOURCES/pipetest-${VERSION}-installed || die Failed to cd to pipetest install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo pipetest installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

# Start it reading in the background
EXPECT_UNBUFFER=expect_unbuffer
if [ "`which $EXPECT_UNBUFFER 2> /dev/null`" = "" ]; then
	EXPECT_UNBUFFER=unbuffer
fi

# Run the benchmark
RETVAL=0
monitor_pre_hook $LOGDIR_RESULTS

pushd $SHELLPACK_SOURCES/pipetest-${VERSION}-installed > /dev/null
$EXPECT_UNBUFFER ./pipe-test | tee $LOGDIR_RESULTS/pipetest.log &
PID_TEE=$!
PID_PIPETEST=`$SHELLPACK_TOPLEVEL/bin/piping-pid.sh $PID_TEE`
echo pipetest pid $PID_PIPETEST

SAMPLECOUNT=0
while [ $SAMPLECOUNT -lt $ITERATIONS ]; do
	sleep 5
	SAMPLECOUNT=`wc -l $LOGDIR_RESULTS/pipetest.log | awk '{print $1}'`
	if [ "`ps h --pid $PID_PIPETEST`" = "" ]; then
		SAMPLECOUNT=$ITERATIONS
	fi
done

echo -n Shutting down pipe-test
for PID in $PID_TEE $PID_PIPETEST; do
	while [ "`ps h --pid $PID`" != "" ]; do
		echo -n .
		kill $PID
		sleep 2
	done
done
echo

monitor_post_hook $LOGDIR_RESULTS

exit $RETVAL
#### Description Run the pipe-test benchmark
#### Details pipetest-bench 12
