#!/bin/bash
# Run perf-bench futex benchmark

P=futexbench-bench
DEFAULT_VERSION=4.4
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi
TESTTIME=15
ITERATIONS=12
TESTLIST=
MAX_THREADS=$NUMCPUS

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--min-threads)
		FUTEXBENCH_MIN_THREADS=$2
		shift 2
		;;
	--max-threads)
		FUTEXBENCH_MAX_THREADS=$2
		shift 2
		;;
	--shared)
		FUTEXBENCH_SHARED=$2
		shift 2
		;;
	--workloads)
		FUTEXBENCH_WORKLOADS=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/perfbuild-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/perfbuild-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-perfbuild -v ${VERSION}  || die perfbuild install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/perfbuild-${VERSION}-installed || die Failed to cd to perfbuild install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo perfbuild installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

PERF_DIR=$SHELLPACK_SOURCES/perfbuild-${VERSION}-installed/bin
PERF_CMD=${PERF_DIR}/perf
SHARED_OPT=""

if [ "$FUTEXBENCH_SHARED" = "yes" ]; then
    SHARED_OPT="-S"
fi

echo $FUTEXBENCH_WORKLOADS > $LOGDIR_RESULTS/workloads

THREADS=
START_THREAD=$FUTEXBENCH_MIN_THREADS
END_THREAD=$FUTEXBENCH_MAX_THREADS
if [ $END_THREAD -gt 32 ]; then
	THREADS=`seq $START_THREAD 3 8`
	THREADS="$THREADS `seq 12 9 32`"
	THREADS="$THREADS `seq 48 31 $END_THREAD`"
elif [ $END_THREAD -gt 8 ]; then
	THREADS=`seq $START_THREAD 2 8`
	THREADS="$THREADS `seq 12 6 $END_THREAD`"
else
	THREADS=`seq $START_THREAD 2 $END_THREAD`
fi
if [ `echo $THREADS | awk '{print $NF}'` -ne $END_THREAD ]; then
	THREADS="$THREADS $END_THREAD"
fi

for NR_THREADS in $THREADS; do
	mmtests_activity process $NR_THREADS/$END_THREAD
	for WORKLOAD in $FUTEXBENCH_WORKLOADS; do
		mmtests_activity $WORKLOAD-$NR_THREADS
		echo "Running test $WORKLOAD (shared=$FUTEXBENCH_SHARED)"
		monitor_pre_hook $LOGDIR_RESULTS $NR_THREADS
		$PERF_CMD bench futex $WORKLOAD -t $NR_THREADS $SHARED_OPT > $LOGDIR_RESULTS/$WORKLOAD-${NR_THREADS}.log 2>&1 &
		PERF_PID=$!
		echo -n Waiting on perf to exit..
		TEST_EXIT=`ps h --pid $PERF_PID`
		while [ "`ps h --pid $PERF_PID`" != "" ]; do
			echo -n .
			sleep 1
			TEST_ERROR=`grep "wakeup all tasks" $LOGDIR_RESULTS/$WORKLOAD-${NR_THREADS}.log`
			if [ "$TEST_ERROR" != "" ]; then
				kill -9 $PERF_PID
				echo WARNING: perf failed to wake all tasks
				touch $LOGDIR_RESULTS/$WORKLOAD-${NR_THREADS}.failed
				TEST_EXIT=""
			else
				TEST_EXIT=`ps h --pid $PERF_PID`
			fi
		done
		wait $PERF_PID
		EXIT_CODE=$?
		echo
		cat $LOGDIR_RESULTS/$WORKLOAD-${NR_THREADS}.log
		echo Exit code $EXIT_CODE
		monitor_post_hook $LOGDIR_RESULTS $NR_THREADS
	done
done

exit $SHELLPACK_SUCCESS
#### Description perf-bench futex
#### Details futexbench-bench 19
