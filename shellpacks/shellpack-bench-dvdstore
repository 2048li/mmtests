#!/bin/bash
P=dvdstore-bench
DEFAULT_VERSION=21
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi
install-depends gnuplot

DBDRIVER=postgres
DBUSER=nobody
EFFECTIVE_CACHESIZE=$((756*1048576))
SHARED_BUFFERS=$((32*1048576))
WORK_MEM=$((32*1048576))
POSTGRES_VERSION=9.6.1
MARIADB_ADMIN_USER=root
MARIADB_ADMIN_PASSWORD=mmtests-default

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--effective-cachesize)
		EFFECTIVE_CACHESIZE=$2
		shift 2
		;;
	--shared-buffers)
		SHARED_BUFFERS=$2
		shift 2
		;;
	--work-mem)
		WORK_MEM=$2
		shift 2
		;;
	--dbdriver)
		DBDRIVER=$2
		shift 2
		;;
	--workload-size)
		WORKLOAD_SIZE=$2
		shift 2
		;;
	--warmup-time)
		WARMUP_TIME=$2
		shift 2
		;;
	--run-time)
		RUN_TIME=$2
		shift 2
		;;
	--max-threads)
		MAX_THREADS=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/dvdstore-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/dvdstore-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-dvdstore -v ${VERSION} --dbdriver ${DBDRIVER} || die dvdstore install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/dvdstore-${VERSION}-installed || die Failed to cd to dvdstore install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo dvdstore installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

WARMUP_TIME=$((WARMUP_TIME/60))
RUN_TIME=$((RUN_TIME/60))

# Initialise database
SYSBENCH_DB_OPTIONS=
export PATH=$SHELLPACK_SOURCES/sysbench-${VERSION}-installed/bin:$PATH
echo Configuring paths for $DBDRIVER
if [ "$DBDRIVER" = "postgres" ]; then
	EXPECT=`which expect`
	EXPECT_SCRIPT=$SHELLPACK_TEMP/dvdstore-expect
	cat > $EXPECT_SCRIPT <<EOF
spawn perl ./Install_DVDStore.pl
expect "Please enter database size"                               { exp_send $((WORKLOAD_SIZE/1048576))\\r }
expect "Please enter whether above database size is in"           { exp_send MB\\r  }
expect "Please enter database type"                               { exp_send PGSQL\\r }
expect "Please enter system type on which DB Server is installed" { exp_send LINUX\\r }
expect eof
EOF
	$EXPECT -f $EXPECT_SCRIPT > $LOGDIR_RESULTS/scriptinit.log 2>&1
	if [ $? -ne 0 ]; then
		cat $LOGDIR_RESULTS/scriptinit.log
		die Failed to create database initialisation scripts
	fi

	cat > $EXPECT_SCRIPT <<EOF
spawn perl ./CreateConfigFile.pl
expect "Please enter target host"                          { exp_send 127.0.0.1\\r }
expect "Please enter database size"                        { exp_send $((WORKLOAD_SIZE/1048576))MB\\r  }
expect "Please enter target hostname for perfmon"          { exp_send \\r }
expect "Please enter <username>:<password>:<IP Address>"   { exp_send \\r }
expect "Please enter if you want detailed view of runtime" { exp_send Y\\r }
expect eof
EOF
	$EXPECT -f $EXPECT_SCRIPT >> $LOGDIR_RESULTS/scriptinit.log 2>&1
	if [ $? -ne 0 ]; then
		cat $LOGDIR_RESULTS/scriptinit.log
		die Failed to create database initialisation scripts
	fi

	PSQL=$SHELLPACK_SOURCES/postgresbuild-${POSTGRES_VERSION}-installed/bin/psql
	RUNDBUSER="su -s /bin/bash $DBUSER -c"
	export PATH=$SHELLPACK_SOURCES/postgresbuild-${POSTGRES_VERSION}-installed/bin:$PATH
	export LD_LIBRARY_PATH=$SHELLPACK_SOURCES/postgresbuild-${POSTGRES_VERSION}-installed/lib
	export PGHOST=/var/run/postgresql
	export PGPORT=5432

	$SHELLPACK_INCLUDE/shellpack-bench-${DBDRIVER}build --stop
	$SHELLPACK_INCLUDE/shellpack-bench-${DBDRIVER}build --start \
		--effective_cachesize $EFFECTIVE_CACHESIZE \
		--shared_buffers $SHARED_BUFFERS \
		--work_mem $WORK_MEM || die Failed to get usable database installation

else
	echo Unknown database driver
	exit $SHELLPACK_ERROR
fi

FIRST_TIME=yes
SYSBENCH_OPTIONS="$MAX_TIME_COMMAND $MAX_TRANSACTIONS_COMMAND $SYSBENCH_DB_OPTIONS"
OLTP_OPTIONS="--test=oltp $OLTP_TRANSTYPE \
		--oltp-test-mode=$OLTP_TESTTYPE \
		--oltp-table-size=$OLTP_TABLESIZE"
THREADS=
START_THREAD=1
END_THREAD=$MAX_THREADS
if [ $END_THREAD -ge 32 ]; then
	THREADS=`seq $START_THREAD 4 8`
	THREADS="$THREADS `seq 12 9 32`"
	THREADS="$THREADS `seq 48 31 $END_THREAD`"
elif [ $END_THREAD -ge 8 ]; then
	THREADS=`seq $START_THREAD 3 8`
	THREADS="$THREADS `seq 12 6 $END_THREAD`"
else
	THREADS=`seq $START_THREAD 2 $END_THREAD`
fi
if [ `echo $THREADS | awk '{print $NF}'` -ne $END_THREAD ]; then
	THREADS="$THREADS $END_THREAD"
fi
for NR_THREADS in $THREADS; do
	if [ $NR_THREADS -lt 1 ]; then
		continue
	fi
	mmtests_activity process $NR_THREADS/$END_THREAD
	$SHELLPACK_INCLUDE/shellpack-bench-${DBDRIVER}build --stop
	$SHELLPACK_INCLUDE/shellpack-bench-${DBDRIVER}build --start \
		--effective_cachesize $EFFECTIVE_CACHESIZE \
		--shared_buffers $SHARED_BUFFERS \
		--work_mem $WORK_MEM || die Failed to get usable database installation

	if [ "$DBDRIVER" = "postgres" ]; then
		echo Creating database and roles
		$RUNDBUSER "$PSQL template1 -c 'DROP DATABASE pgdata;'"
		$RUNDBUSER "$PSQL template1 -c 'DROP ROLE ds2;'"
		$RUNDBUSER "$PSQL template1 -c 'CREATE DATABASE pgdata;'" || die Failed to setup database
		$RUNDBUSER "$PSQL template1 -c 'CREATE ROLE ds2 with LOGIN;'" || die Failed to create sbtest role
		cp $SHELLPACK_SOURCES/postgresbuild-${POSTGRES_VERSION}-installed/data/postgresql.conf $LOGDIR_RESULTS
		cd $SHELLPACK_SOURCES/dvdstore-${VERSION}-installed/pgsqlds2

		echo Executing pgsqlds2_create_all.sh
		sed -i -e "s/SYSDBA=.*/SYSDBA=$DBUSER/" pgsqlds2_create_all.sh
		bash ./pgsqlds2_create_all.sh > $LOGDIR_RESULTS/dbinit.log 2>&1
		if [ $? -ne 0 ]; then
			cat $LOGDIR_RESULTS/dbinit-${NR_THREADS}.log
			die pgsqlds2_create_all.sh failed
		fi
	fi

	monitor_pre_hook $LOGDIR_RESULTS $NR_THREADS
	cd $SHELLPACK_SOURCES/dvdstore-${VERSION}-installed
	sed -i -e "s/n_threads=.*/n_threads=$NR_THREADS/"      DriverConfig.txt
	sed -i -e "s/warmup_time=.*/warmup_time=$WARMUP_TIME/" DriverConfig.txt
	sed -i -e "s/run_time=.*/run_time=$RUN_TIME/"          DriverConfig.txt

	echo "#!/bin/bash
echo \$\$ > $SHELLPACK_TEMP/dvdstore.pid
exec mono ./pgsqlds2/ds2pgsqldrivermono.exe --config_file=DriverConfig.txt" > $SHELLPACK_TEMP/dvdstore.sh
	chmod a+x $SHELLPACK_TEMP/dvdstore.sh

	NR_FAILED=0
	RETRY=1
	while [ $RETRY -ne 0 ]; do
		echo Running with $NR_THREADS/$MAX_THREADS threads, fail count $NR_FAILED
		STARTTIME=`date +%s`
		MAX_RUNTIME=$(((WARMUP_TIME+RUN_TIME)*60*3/2))
		RETRY=0
		$TIME_CMD -o $LOGDIR_RESULTS/time-${NR_THREADS} \
			$SHELLPACK_TEMP/dvdstore.sh 2>&1 \
					| grep -v "already exists" \
					| tee $LOGDIR_RESULTS/dvdstore-${NR_THREADS}.log &
		sleep 5
		DVDSTORE_PID=`cat $SHELLPACK_TEMP/dvdstore.pid`

		# Monitor PID to make sure it does not have a crashed thread or infinte loop
		PID_CHECK=0
		while [ $PID_CHECK -eq 0 ]; do
			CURRENTTIME=`date +%s`
			RUNNING=$((CURRENTTIME-STARTTIME))
			echo TICK: `date`: PID $DVDSTORE_PID Running $RUNNING max $MAX_RUNTIME
			if [ $RUNNING -ge $MAX_RUNTIME ]; then
				echo Process crapped out, retrying
				kill -9 $DVDSTORE_PID
				sleep 5
				killall -KILL mono
				RETRY=1
				NR_FAILED=$((NR_FAILED+1))
			fi
			ps -p $DVDSTORE_PID > /dev/null
			PID_CHECK=$?
			sleep 10
		done
		echo Cleaning up remaining processes
		wait

		# Check if any exceptions were caught that forced a premature exit
		if [ $RETRY -eq 0 ]; then
			grep -q "Unhandled Exception" $LOGDIR_RESULTS/dvdstore-${NR_THREADS}.log
			if [ $? -eq 0 ]; then
				RETRY=1
				NR_FAILED=$((NR_FAILED+1))
			fi
		fi

		if [ $RETRY -eq 1 ]; then
			cp $LOGDIR_RESULTS/dvdstore-${NR_THREADS}.log    $LOGDIR_RESULTS/dvdstore-${NR_THREADS}.failed
			echo $NR_FAILED                               >> $LOGDIR_RESULTS/dvdstore-${NR_THREADS}.failed
		fi

		if [ $NR_FAILED -eq 4 ]; then
			echo Giving up trying to get a clean run
			RETRY=0
		fi
	done
	monitor_post_hook $LOGDIR_RESULTS $NR_THREADS
done

# Shutdown server
$SHELLPACK_INCLUDE/shellpack-bench-${DBDRIVER}build --stop

echo dvdstore successfully completed
exit $SHELLPACK_SUCCESS
#### Description dvdstore
#### Details dvdstore-bench 22
