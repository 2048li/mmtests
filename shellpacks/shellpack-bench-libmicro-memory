#!/bin/bash
P=libmicro-memory-bench
DEFAULT_VERSION=1
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/libmicro-memory-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/libmicro-memory-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-libmicro-memory -v ${VERSION}  || die libmicro-memory install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/libmicro-memory-${VERSION}-installed || die Failed to cd to libmicro-memory install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo libmicro-memory installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

cd $SHELLPACK_SOURCES/libmicro-memory-${VERSION}-installed || die Failed to cd to libmicro directory

COMMON="-E -C 0 -D 30000 -B 10000 -L -S -W"

TMPROOT=/tmp/libmicro.$$
mkdir -p $TMPROOT
trap "rm -rf $TMPROOT" 0 2

TFILE=$TMPROOT/data
dd if=/dev/zero of=$TFILE bs=1024k count=10 2>/dev/null

while read A B C; do
	monitor_pre_hook $LOGDIR_RESULTS $B
	if [ -f bin/$A ]; then
		eval bin/$A $COMMON -N "$B" $C 2>&1 > $LOGDIR_RESULTS/$B.log
	fi
	monitor_post_hook $LOGDIR_RESULTS $B
done <<EOT
memset	memset_10	-s 10
memset	memset_256	-s 256
memset	memset_256_u	-s 256	 -a 1
memset	memset_1k	-s 1k
memset	memset_4k	-s 4k
memset	memset_4k_uc	-s 4k -u
memset	memset_10k	-s 10k
memset	memset_1m	-s 1m
memset	memset_10m	-s 10m
memset	memsetP2_10m	-s 10m -P 2
memrand	memrand	-s 128m
cachetocache	cachetocache	-s 100k -T 2
malloc	malloc_10	-s 10 -g 10
malloc	malloc_100	-s 100 -g 10
malloc	malloc_1k	-s 1k -g 10
malloc	malloc_10k	-s 10k -g 10
malloc	malloc_100k	-s 100k -g 10
malloc	mallocT2_10	-s 10 -g 10 -T 2
malloc	mallocT2_100	-s 100 -g 10 -T 2
malloc	mallocT2_1k	-s 1k -g 10 -T 2
malloc	mallocT2_10k	-s 10k -g 10 -T 2
malloc	mallocT2_100k	-s 100k -g 10 -T 2
memcpy	memcpy_10	-s 10
memcpy	memcpy_1k	-s 1k
memcpy	memcpy_10k	-s 10k
memcpy	memcpy_1m	-s 1m
memcpy	memcpy_10m	-s 10m
strcpy	strcpy_10	-s 10
strcpy	strcpy_1k	-s 1k
strlen	strlen_10	-s 10
strlen	strlen_1k	-s 1k
strchr	strchr_10	-s 10
strchr	strchr_1k	-s 1k
strcmp	strcmp_10	-s 10
strcmp	strcmp_1k	-s 1k
strcasecmp	scasecmp_10	-s 10
strcasecmp	scasecmp_1k	-s 1k
mmap	mmap_z8k	-l 8k		-f /dev/zero
mmap	mmap_z128k	-l 128k		-f /dev/zero
mmap	mmap_t8k	-l 8k		-f $TFILE
mmap	mmap_t128k	-l 128k		-f $TFILE
mmap	mmap_a8k	-l 8k		-f MAP_ANON
mmap	mmap_a128k	-l 128k		-f MAP_ANON
mmap	mmap_rz8k	-l 8k -r	-f /dev/zero
mmap	mmap_rz128k	-l 128k -r	-f /dev/zero
mmap	mmap_rt8k	-l 8k -r	-f $TFILE
mmap	mmap_rt128k	-l 128k -r	-f $TFILE
mmap	mmap_ra8k	-l 8k -r	-f MAP_ANON
mmap	mmap_ra128k	-l 128k -r	-f MAP_ANON
mmap	mmap_wz8k	-l 8k -w	-f /dev/zero
mmap	mmap_wz128k	-l 128k -w	-f /dev/zero
mmap	mmap_wt8k	-l 8k -w	-f $TFILE
mmap	mmap_wt128k	-l 128k -w	-f $TFILE
mmap	mmap_wa8k	-l 8k -w	-f MAP_ANON
mmap	mmap_wa128k	-l 128k -w	-f MAP_ANON
munmap	unmap_z8k	-l 8k		-f /dev/zero
munmap	unmap_z128k	-l 128k		-f /dev/zero
munmap	unmap_t8k	-l 8k		-f $TFILE
munmap	unmap_t128k	-l 128k		-f $TFILE
munmap	unmap_a8k	-l 8k		-f MAP_ANON
munmap	unmap_a128k	-l 128k		-f MAP_ANON
munmap	unmap_rz8k	-l 8k	-r	-f /dev/zero
munmap	unmap_rz128k	-l 128k -r	-f /dev/zero
munmap	unmap_rt8k	-l 8k	-r	-f $TFILE
munmap	unmap_rt128k	-l 128k	-r	-f $TFILE
munmap	unmap_ra8k	-l 8k	-r	-f MAP_ANON
munmap	unmap_ra128k	-l 128k	-r	-f MAP_ANON
munmap	unmap_wz8k	-l 8k	-w	-f /dev/zero
munmap	unmap_wz128k	-l 128k	-w	-f /dev/zero
munmap	unmap_wt8k	-l 8k	-w	-f $TFILE
munmap	unmap_wt128k	-l 128k	-w	-f $TFILE
munmap	unmap_wa8k	-l 8k	-w	-f MAP_ANON
munmap	unmap_wa128k	-l 128k	-w	-f MAP_ANON
mprotect	mprot_z8k	-l 8k			-f /dev/zero
mprotect	mprot_z128k	-l 128k		-f /dev/zero
mprotect	mprot_wz8k	-l 8k	-w	-f /dev/zero
mprotect	mprot_wz128k	-l 128k	-w	-f /dev/zero
mprotect	mprot_twz8k	-l 8k -w -t -f /dev/zero
mprotect	mprot_tw128k	-l 128k -w -t -f /dev/zero
mprotect	mprot_tw4m	-l 4m -w -t -f /dev/zero
pipe	pipe_pst1	-s 1	-x pipe -m st
pipe	pipe_pmt1	-s 1	-x pipe -m mt
pipe	pipe_pmp1	-s 1	-x pipe -m mp
pipe	pipe_pst4k	-s 4k	-x pipe -m st
pipe	pipe_pmt4k	-s 4k	-x pipe -m mt
pipe	pipe_pmp4k	-s 4k	-x pipe -m mp
pipe	pipe_sst1	-s 1	-x sock -m st
pipe	pipe_smt1	-s 1	-x sock -m mt
pipe	pipe_smp1	-s 1	-x sock -m mp
pipe	pipe_sst4k	-s 4k	-x sock -m st
pipe	pipe_smt4k	-s 4k	-x sock -m mt
pipe	pipe_smp4k	-s 4k	-x sock -m mp
pipe	pipe_tst1	-s 1	-x tcp -m st
pipe	pipe_tmt1	-s 1	-x tcp -m mt
pipe	pipe_tmp1	-s 1	-x tcp -m mp
pipe	pipe_tst4k	-s 4k	-x tcp -m st
pipe	pipe_tmt4k	-s 4k	-x tcp -m mt
pipe	pipe_tmp4k	-s 4k	-x tcp -m mp
EOT

exit $SHELLPACK_SUCCESS
#### Description libmicro-memory
#### Details libmicro-memory-bench 8
