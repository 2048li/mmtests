#!/bin/bash
# filelockperf

P=filelockperf-bench
DEFAULT_VERSION=1
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--min-threads)
		FILELOCKPERF_MIN_THREADS=$2
		shift 2
		;;
	--max-threads)
		FILELOCKPERF_MAX_THREADS=$2
		shift 2
		;;
	--workloads)
		FILELOCKPERF_WORKLOADS=$2
		shift 2
		;;
	--iterations)
		FILELOCKPERF_ITERATIONS=$2
		shift 2
		;;
	--lockiters)
		FILELOCKPERF_LOCKITERS=$2
		shift 2
		;;
	--locktypes)
		FILELOCKPERF_LOCKTYPES=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/filelockperf-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/filelockperf-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-filelockperf -v ${VERSION}  || die filelockperf install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/filelockperf-${VERSION}-installed || die Failed to cd to filelockperf install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo filelockperf installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

echo $FILELOCKPERF_WORKLOADS > $LOGDIR_RESULTS/workloads
echo $FILELOCKPERF_LOCKTYPES > $LOGDIR_RESULTS/locktypes
echo $FILELOCKPERF_ITERATIONS > $LOGDIR_RESULTS/iterations
IFS=',' read -a ALL_WORKLOADS <<< "$FILELOCKPERF_WORKLOADS"
IFS=',' read -a ALL_LOCKTYPES <<< "$FILELOCKPERF_LOCKTYPES"

for WORKLOAD in ${ALL_WORKLOADS[@]}
do
THREADS=
START_THREAD=$FILELOCKPERF_MIN_THREADS
END_THREAD=$FILELOCKPERF_MAX_THREADS
if [ $END_THREAD -gt 32 ]; then
	THREADS=`seq $START_THREAD 3 8`
	THREADS="$THREADS `seq 12 9 32`"
	THREADS="$THREADS `seq 48 31 $END_THREAD`"
elif [ $END_THREAD -gt 8 ]; then
	THREADS=`seq $START_THREAD 2 8`
	THREADS="$THREADS `seq 12 6 $END_THREAD`"
else
	THREADS=`seq $START_THREAD 2 $END_THREAD`
fi
if [ `echo $THREADS | awk '{print $NF}'` -ne $END_THREAD ]; then
	THREADS="$THREADS $END_THREAD"
fi

for NR_THREADS in $THREADS; do
	if [ $NR_THREADS -lt $FILELOCKPERF_MIN_THREADS ]; then
		continue
	fi
	mmtests_activity process $NR_THREADS/$END_THREAD
		monitor_pre_hook $LOGDIR_RESULTS $NR_THREADS
for ITERATION in `seq 1 $FILELOCKPERF_ITERATIONS`; do
	mmtests_activity iteration $ITERATION
			for TYPE in ${ALL_LOCKTYPES[@]}
			do
				cmd="$WORKLOAD"
				if [ $TYPE == "single" ]; then
				    cmd+="01"
				elif [ $TYPE == "multi" ]; then
				    cmd+="02"
				else
				    die Invalid lock type $TYPE ... aborting.
				fi

				TMPFILE="tmp-${WORKLOAD}-${ITERATION}-${TYPE}-${NR_THREADS}"
				outfile="$LOGDIR_RESULTS/filelockperf-${WORKLOAD}-${ITERATION}-${TYPE}-$NR_THREADS.log"

				echo "Running $WORKLOAD $TYPE $NR_THREADS/$FILELOCKPERF_MAX_THREADS threads (run $ITERATION/$FILELOCKPERF_ITERATIONS)"
				rm -rf $TMPFILE # cleanup any bogus leftovers for previous runs.
				save_rc ./$cmd -n $NR_THREADS -l $FILELOCKPERF_LOCKITERS $TMPFILE | tee $outfile > /dev/null
				recover_rc
				rm -rf $TMPFILE

				if [ $? -ne 0 ]; then
				    die Failed to run $WORKLOAD $TYPE
				fi
			done
done
		monitor_post_hook $LOGDIR_RESULTS $NR_THREADS
done
done

exit $SHELLPACK_SUCCESS
#### Description filelockperf
#### Details filelockperf-bench 4
