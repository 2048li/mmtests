#!/bin/bash
# Run wis benchmark

P=wis-bench
DEFAULT_VERSION=0
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi
TESTTIME=15
ITERATIONS=12

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--min-threads)
		WIS_MIN_THREADS=$2
		shift 2
		;;
	--max-threads)
		WIS_MAX_THREADS=$2
		shift 2
		;;
	--workloads)
		WIS_WORKLOADS=$2
		shift 2
		;;
	--iterations)
		WIS_ITERATIONS=$2
		shift 2
		;;
	--models)
		WIS_MODELS=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/wis-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/wis-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-wis -v ${VERSION}  || die wis install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/wis-${VERSION}-installed || die Failed to cd to wis install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo wis installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

echo $WIS_WORKLOADS > $LOGDIR_RESULTS/workloads
echo $WIS_MODELS > $LOGDIR_RESULTS/models

IFS=',' read -a ALL_MODELS <<< "$WIS_MODELS"
IFS=',' read -a ALL_WORKLOADS <<< "$WIS_WORKLOADS"

for WORKLOAD in ${ALL_WORKLOADS[@]}
do
THREADS=
START_THREAD=$WIS_MIN_THREADS
END_THREAD=$WIS_MAX_THREADS
if [ $END_THREAD -gt 32 ]; then
	THREADS=`seq $START_THREAD 3 8`
	THREADS="$THREADS `seq 12 9 32`"
	THREADS="$THREADS `seq 48 31 $END_THREAD`"
elif [ $END_THREAD -gt 8 ]; then
	THREADS=`seq $START_THREAD 2 8`
	THREADS="$THREADS `seq 12 6 $END_THREAD`"
else
	THREADS=`seq $START_THREAD 2 $END_THREAD`
fi
if [ `echo $THREADS | awk '{print $NF}'` -ne $END_THREAD ]; then
	THREADS="$THREADS $END_THREAD"
fi

for NR_THREADS in $THREADS; do
	mmtests_activity process $NR_THREADS/$END_THREAD
		monitor_pre_hook $LOGDIR_RESULTS $NR_THREADS
		echo Running test $WORKLOAD
		for MODEL in ${ALL_MODELS[@]}
		do
			echo Starting $MODEL $NR_THREADS/$WIS_MAX_THREADS
			cmd="$WORKLOAD"
			cmd+="_$MODEL"
			outfile="$LOGDIR_RESULTS/wis-${WORKLOAD}-${MODEL}-$NR_THREADS.log"
			./$cmd -t $NR_THREADS -s $WIS_ITERATIONS | tee $outfile > /dev/null

			# Get rid of the warmup values (number of runs are constant).
			sed -i '1,8d' $outfile
		done
	monitor_post_hook $LOGDIR_RESULTS $NR_THREADS
done
done

exit $SHELLPACK_SUCCESS
#### Description will-it-scale
#### Details wis-bench 1
