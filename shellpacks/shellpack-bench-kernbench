#!/bin/bash
# Benchmark a number of kernel builds
P=kernbench
DEFAULT_VERSION=3.0
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi
ITERATIONS=5

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--min-threads)
		KERNBENCH_MIN_THREADS=$2
		shift 2
		;;
	--max-threads)
		KERNBENCH_MAX_THREADS=$2
		shift 2
		;;
	--iterations)
		KERNBENCH_ITERATIONS=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

WEB_LOCATION=https://www.kernel.org/pub/linux/kernel/v3.0/linux-${VERSION}.tar.gz
MIRROR_LOCATION=$WEBROOT/kernbench/linux-$VERSION.tar.gz
THREADS=$(($NUMCPUS))

pushd $SHELLPACK_DATA > /dev/null

sources_fetch $WEB_LOCATION $MIRROR_LOCATION ./linux-$VERSION.tar.gz
tar xf linux-$VERSION.tar.gz || die Failed to extract
cd linux-$VERSION || die Unexpected layout

yes '' | make defconfig > /dev/null 2>&1 || die Failed to make defconfig

make -j$THREADS clean > /dev/null

echo Warming run
make -j$THREADS vmlinux > /dev/null 2>&1 || die Failed to build vmlinux
make clean >/dev/null

# Build pass
NR_THREADS=$KERNBENCH_MIN_THREADS
if [ "$NR_THREADS" = "" ]; then
	NR_THREADS=1
fi
THREADS=$NR_THREADS
NR_THREADS=$((NR_THREADS*2))
while [ $NR_THREADS -le $KERNBENCH_MAX_THREADS ]; do
	THREADS="$THREADS $NR_THREADS"
	NR_THREADS=$((NR_THREADS*2))
done
if [ `echo $THREADS | awk '{print $NF}'` -ne $KERNBENCH_MAX_THREADS ]; then
	THREADS="$THREADS $KERNBENCH_MAX_THREADS"
fi
for NR_THREADS in $THREADS; do
	if [ $NR_THREADS -gt $KERNBENCH_MAX_THREADS ]; then
		NR_THREADS=$KERNBENCH_MAX_THREADS
	fi
	mmtests_activity process $NR_THREADS/$KERNBENCH_MAX_THREADS
	monitor_pre_hook $LOGDIR_RESULTS $NR_THREADS
for ITERATION in `seq 1 $KERNBENCH_ITERATIONS`; do
	mmtests_activity iteration $ITERATION
		echo Starting threads $NR_THREADS/$KERNBENCH_MAX_THREADS iteration $ITERATION/$KERNBENCH_ITERATIONS
		sync

		save_rc $TIME_CMD make -j$NR_THREADS vmlinux 2>> $LOGDIR_RESULTS/kernbench-${NR_THREADS}-$ITERATION.time > /dev/null
		grep elapsed $LOGDIR_RESULTS/kernbench-${NR_THREADS}-$ITERATION.time``
		recover_rc
		if [ $? -ne 0 ]; then
			die Failed to run kernbench
		fi

		# cleanup
		make clean >/dev/null
done
	monitor_post_hook $LOGDIR_RESULTS $NR_THREADS
done

# Cleanup
rm -rf $SHELLPACK_DATA/*

# clean up the tree to save space
popd > /dev/null
rm -rf $TMPDIR/kernbench

exit $SHELLPACK_SUCCESS
#### Description Benchmark based on kernel builds
#### Details kernbench-bench 32
