#!/bin/bash
# This script installs tiobench and whatever
P=tiobench-bench
DEFAULT_VERSION=0.3.3
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/tiobench-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/tiobench-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-tiobench -v ${VERSION}  || die tiobench install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/tiobench-${VERSION}-installed || die Failed to cd to tiobench install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo tiobench installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
install-depends hdparm

# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

set_mmtests_numactl 0 0

echo Recording max expected speed for reads
PARTITION=`df -T $TESTDISK_DIR | tail -1 | awk '{print $1}'`
SPEED=`hdparm -t $PARTITION | grep Timing | awk '{print $(NF-1)}'`
echo $SPEED > $LOGDIR_RESULTS/disk-read.speed
echo Expected speed $SPEED

if [ "$TIOBENCH_RANDOM" = "" -o "$TIOBENCH_RANDOM" != "0" ]; then
	TIOBENCH_COMMAND_RANDOM="--random $TIOBENCH_RANDOM"
fi

NR_THREADS=$TIOBENCH_MIN_CLIENTS
if [ "$NR_THREADS" = "" ]; then
	NR_THREADS=1
fi
THREADS=$NR_THREADS
NR_THREADS=$((NR_THREADS*2))
while [ $NR_THREADS -le $TIOBENCH_MAX_CLIENTS ]; do
	THREADS="$THREADS $NR_THREADS"
	NR_THREADS=$((NR_THREADS*2))
done
if [ `echo $THREADS | awk '{print $NF}'` -ne $TIOBENCH_MAX_CLIENTS ]; then
	THREADS="$THREADS $TIOBENCH_MAX_CLIENTS"
fi
for NR_THREADS in $THREADS; do
	if [ $NR_THREADS -gt $TIOBENCH_MAX_CLIENTS ]; then
		NR_THREADS=$TIOBENCH_MAX_CLIENTS
	fi
	mmtests_activity process $NR_THREADS/$TIOBENCH_MAX_CLIENTS
	monitor_pre_hook $LOGDIR_RESULTS $NR_THREADS
	for ITERATION in `seq 1 $TIOBENCH_ITERATIONS`; do
		eval $MMTESTS_NUMACTL ./tiobench.pl $TIOBENCH_COMMAND_RANDOM \
			--dir     $TESTDISK_DIR \
			--numruns 1 \
			--size    $((TIOBENCH_SIZE/1048576)) \
			--block   $TIOBENCH_BLOCKSIZE \
			--threads $NR_THREADS \
			2>&1 | tee $LOGDIR_RESULTS/tiobench-$NR_THREADS-$ITERATION.log \
				|| die Failed to run tiobench
	done
	monitor_post_hook $LOGDIR_RESULTS $NR_THREADS
done

exit $SHELLPACK_SUCCESS
#### Description tiobench
#### Details tiobench-bench 21
