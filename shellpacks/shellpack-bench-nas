#!/bin/bash
# This is the script for running the NAS Parallel Benchmark
#
P=nas-bench
DEFAULT_VERSION=3.3
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi

install-depends openmpi openmpi-devel
install-depends libpsm_infinipath1

NAS_TYPE=SER
RUNBITS=
OPENMP=
OPENMPI=
MEMTOTAL_MBYTES=$((MEMTOTAL_BYTES/1048576))

if [ "$NAS_MAX_CPUS" = "" ]; then
	NAS_MAX_CPUS=$NUMCPUS
fi

if [ "$NAS_MPI_PATH" != "" ]; then
	export PATH=$PATH:$NAS_MPI_PATH
fi

if [ "$NAS_MPI_LIBPATH" != "" ]; then
	export LD_LIBRARY_PATH=$NAS_MPI_LIBPATH
fi

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--type)
		NAS_TYPE=$2
		MPIOPT="-mca btl ^openib,udapl"
		if [ "$NAS_TYPE" = "OMP" ]; then
			OPENMP=--openmp
		fi
		if [ "$NAS_TYPE" = "MPI" ]; then
			export OMPI_TMPDIR=$SHELLPACK_DATA
			export TMPDIR=$SHELLPACK_DATA
			OPENMPI=--openmpi
			case $NAS_CLASS in
			C)
				if [ $MEMTOTAL_MBYTES -lt 6144 ]; then
					echo INFO: Machine has too little memory to be useful
					exit $SHELLPACK_SUCCESS
				fi
				;;
			*)
				echo Machine has sufficient memory for testing.
				;;
			esac
		fi
		shift 2
		;;
	--bitness)
		RUNBITS=$2
		shift 2
		;;
	--cma)
		MPIOPT="-mca btl btl_sm_use_cma 1"
		shift
		;;
	--max-cpus)
		NAS_MAX_CPUS=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/nas-3.3
fi
if [ ! -d $SHELLPACK_SOURCES/nas-3.3-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-nas -v ${VERSION}  || die nas install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/nas-${VERSION}-installed || die Failed to cd to nas install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo nas installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

# Additional test parameters
case $NAS_TYPE in
SER)
	JOBLIST="bt cg dc ep ft is lu mg sp ua"
	;;
MPI)
	JOBLIST="bt cg ep ft is lu mg sp"
	if [ "$NAS_CLASS" = "D" ]; then
		JOBLIST=`echo $JOB_LIST | sed -e 's/ft //'`
	fi
	if [ "$NAS_ALLOW_CPU_SATURATE" = "yes" ]; then
		NAS_MAX_CPUS=$((NAS_MAX_CPUS+1))
	fi
	MPICPUS=$(round_down_power_2 $NAS_MAX_CPUS)
	;;
OMP)
	JOBLIST="bt cg dc ep ft is lu mg sp ua"
	if [ "$NAS_CLASS" = "D" ]; then
		JOBLIST=`echo $JOB_LIST | sed -e 's/ft //'`
	fi
	export OMP_NUM_THREADS=$NAS_MAX_CPUS
	;;
*)
	die "Unrecognised NAS type $NAS_TYPE"
	;;
esac

if [ "$RUNBITS" = "" ]; then
	case `uname -m` in
		i?86)
			RUNBITS=32
			;;
		*)
			RUNBITS=64
			;;
	esac
fi
export PATH=$SHELLPACK_TOPLEVEL/nas/bin:$PATH

# Generate suite.def
pushd $SHELLPACK_SOURCES/nas-$VERSION-installed/NPB3.3-$NAS_TYPE > /dev/null || die Failed to cd to nas-$VERSION-installed/NPB3.3-$NAS_TYPE
echo -n > config/suite.def
for JOB in $JOBLIST; do
	echo "$JOB      $NAS_CLASS $MPICPUS" >> config/suite.def
done

# Run the benchmark ##########################################################
GENSPECSH="generate-nas.sh --bitness ${RUNBITS} $OPENMP $OPENMPI"
$GENSPECSH > config/make.def
cp config/make.def $LOGDIR_RESULTS || die "Failed to generate make.def"

make clean || die "Failed to clean"
make suite || die "Failed to build"

for JOB in $JOBLIST; do
	mmtests_activity $JOB
	if [ "$RUNBITS" = "32" -a ! -x ./bin/$JOB.$NAS_CLASS ]; then
		echo "Skipping $JOB.$NAS_CLASS"
		continue
	fi

	echo Executing $JOB.$NAS_CLASS
	monitor_pre_hook $LOGDIR_RESULTS $JOB.$NAS_CLASS
	case $NAS_TYPE in
	SER|OMP)
		$TIME_CMD -o $LOGDIR_RESULTS/time-$JOB.$NAS_CLASS.time	\
			./bin/$JOB.$NAS_CLASS				\
			> $LOGDIR_RESULTS/$JOB.$NAS_CLASS.log 2>&1
		;;
	MPI)
		$TIME_CMD -o $LOGDIR_RESULTS/time-$JOB.$NAS_CLASS.time \
			mpirun --allow-run-as-root $MPIOPT -np $MPICPUS $MPIRUN_EXTRA ./bin/$JOB.$NAS_CLASS.$MPICPUS \
			> $LOGDIR_RESULTS/$JOB.$NAS_CLASS.log 2>&1
		;;
	esac

	if [ $? -ne 0 ]; then
		die "Failed to execute $JOB.$NAS_CLASS"
	fi
	monitor_post_hook $LOGDIR_RESULTS $JOB.$NAS_CLASS

	rm `find -name "ADC.view.dat*"` 2> /dev/null
done

exit $SHELLPACK_SUCCESS
#### Description NAS Parallel Benchmark
#### Details nas-bench 75
