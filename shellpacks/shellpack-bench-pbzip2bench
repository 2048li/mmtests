#!/bin/bash
# Run pbzip2 benchmark

P=pbzip2bench-bench
DEFAULT_VERSION=0
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi

ITERATIONS=12
TESTLIST=

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--min-threads)
		PBZIP2BENCH_MIN_THREADS=$2
		shift 2
		;;
	--max-threads)
		PBZIP2BENCH_MAX_THREADS=$2
		shift 2
		;;
	--iterations)
		PBZIP2BENCH_ITERATIONS=$2
		shift 2
		;;
	--file)
		PBZIP2BENCH_FILE=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/pbzip2bench-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/pbzip2bench-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-pbzip2bench -v ${VERSION}  || die pbzip2bench install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/pbzip2bench-${VERSION}-installed || die Failed to cd to pbzip2bench install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo pbzip2bench installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

# Copy/download test file into the test partition
if [ "$PBZIP2BENCH_FILE" = "" ]; then
	die PBZIP2BENCH_FILE must be specified
fi
if [ -e $PBZIP2BENCH_FILE ]; then
	mmtests_activity Copying
	cp $PBZIP2BENCH_FILE $SHELLPACK_TEMP/in.file.gz
	if [ $? -ne 0 ]; then
		die Failed to copy $PBZIP2BENCH_FILE
	fi
else
	mmtests_activity Downloading
	echo Downloading $PBZIP2BENCH_FILE
	wget -O $SHELLPACK_TEMP/in.file.gz -q $PBZIP2BENCH_FILE
	if [ $? -ne 0 ]; then
		die Failed to download $PBZIP2BENCH_FILE
	fi
fi
if [ "`file $SHELLPACK_TEMP/in.file.gz | grep gzip`" = "" ]; then
	echo Source file already uncompressed
	mv $SHELLPACK_TEMP/in.file.gz $SHELLPACK_TEMP/in.file
else
	echo Uncompressing source file
	gunzip $SHELLPACK_TEMP/in.file.gz || die Failed to decompress source file
fi

THREADS=
START_THREAD=$PBZIP2BENCH_MIN_THREADS
END_THREAD=$PBZIP2BENCH_MAX_THREADS
if [ $END_THREAD -gt 32 ]; then
	THREADS=`seq $START_THREAD 3 8`
	THREADS="$THREADS `seq 12 9 32`"
	THREADS="$THREADS `seq 48 31 $END_THREAD`"
elif [ $END_THREAD -gt 8 ]; then
	THREADS=`seq $START_THREAD 2 8`
	THREADS="$THREADS `seq 12 6 $END_THREAD`"
else
	THREADS=`seq $START_THREAD 2 $END_THREAD`
fi
if [ `echo $THREADS | awk '{print $NF}'` -ne $END_THREAD ]; then
	THREADS="$THREADS $END_THREAD"
fi

for NR_THREADS in $THREADS; do
	mmtests_activity process $NR_THREADS/$END_THREAD
	monitor_pre_hook $LOGDIR_RESULTS $NR_THREADS
for ITERATION in `seq 1 $PBZIP2BENCH_ITERATIONS`; do
	mmtests_activity iteration $ITERATION
		echo Starting threads $NR_THREADS/$PBZIP2BENCH_MAX_THREADS iteration $ITERATION/$PBZIP2BENCH_ITERATIONS
		save_rc $TIME_CMD -o $LOGDIR_RESULTS/pbzip2bench-${NR_THREADS}-$ITERATION.time \
		    $SHELLPACK_SOURCES/pbzip2bench-${VERSION}-installed/pbzip2 --keep --force --compress -p${NR_THREADS} $SHELLPACK_TEMP/in.file 2>&1 | tee $LOGDIR_RESULTS/pbzip2bench-${NR_THREADS}-${ITERATION}.log
		recover_rc
		if [ $? -ne 0 ]; then
			die Failed to run pbzip2bench
		fi

done
	monitor_post_hook $LOGDIR_RESULTS $NR_THREADS
done
rm $SHELLPACK_TEMP/in.file
exit $SHELLPACK_SUCCESS
#### Description pbzip2bench
#### Details pbzip2bench-bench 1
