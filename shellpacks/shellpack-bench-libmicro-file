#!/bin/bash
P=libmicro-file-bench
DEFAULT_VERSION=1
. $SHELLPACK_INCLUDE/common.sh
TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
        TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
        TIME_CMD="time"
fi

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=
SERVERSIDE_COMMAND=none
SERVERSIDE_NAME=`date +%Y%m%d-%H%M-%S`

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--serverside-command)
		SERVERSIDE_COMMAND=$2
		shift 2
		;;
	--serverside-name)
		SERVERSIDE_NAME=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/libmicro-file-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/libmicro-file-${VERSION}-installed ]; then
	mmtests_activity source-install
	$SHELLPACK_INCLUDE/shellpack-install-libmicro-file -v ${VERSION}  || die libmicro-file install script returned error
	mmtests_activity source-installed
fi
cd $SHELLPACK_SOURCES/libmicro-file-${VERSION}-installed || die Failed to cd to libmicro-file install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo libmicro-file installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

cd $SHELLPACK_SOURCES/libmicro-file-${VERSION}-installed || die Failed to cd to libmicro directory

COMMON="-E -C 2000 -B 10000 -L -S -W"

TMPROOT=/tmp/libmicro.$$
VARROOT=/var/tmp/libmicro.$$
mkdir -p $TMPROOT
mkdir -p $VARROOT
trap "rm -rf $TMPROOT $VARROOT" 0 2

TFILE=$TMPROOT/data
TDIR1=$TMPROOT/0/1/2/3/4/5/6/7/8/9
VFILE=$VARROOT/data
VDIR1=$VARROOT/0/1/2/3/4/5/6/7/8/9

dd if=/dev/zero of=$TFILE bs=1024k count=10 2>/dev/null
dd if=/dev/zero of=$VFILE bs=1024k count=10 2>/dev/null
mkdir -p $TDIR1
mkdir -p $VDIR1

while read A B C; do
	monitor_pre_hook $LOGDIR_RESULTS $B
	if [ -f bin/$A ]; then
		eval bin/$A $COMMON -N "$B" $C 2>&1 > $LOGDIR_RESULTS/$B.log
	fi
	monitor_post_hook $LOGDIR_RESULTS $B
done <<EOT
close		close_bad			-b
close		close_tmp			-f $TFILE
close		close_usr			-f $VFILE
close		close_zero			-f /dev/zero
chdir		chdir_tmp		$TDIR1 $TDIR2
chdir		chdir_usr		$VDIR1 $VDIR2
chdir		chgetwd_tmp	-g $TDIR1 $TDIR2
chdir		chgetwd_usr	-g $VDIR1 $VDIR2
realpath	realpath_tmp		-f $TDIR1
realpath	realpath_usr	-f $VDIR1
lseek		lseek_t8k	-s 8k	-f $TFILE
lseek		lseek_u8k	-s 8k	-f $VFILE
open		open_tmp			-f $TFILE
open		open_usr			-f $VFILE
open		open_zero			-f /dev/zero
dup		dup
recurse		recurse
read		read_t1k	-s 1k			-f $TFILE
read		read_t10k	-s 10k			-f $TFILE
read		read_t100k	-s 100k			-f $TFILE
read		read_u1k	-s 1k			-f $VFILE
read		read_u10k	-s 10k			-f $VFILE
read		read_u100k	-s 100k			-f $VFILE
read		read_z1k	-s 1k			-f /dev/zero
read		read_z10k	-s 10k			-f /dev/zero
read		read_z100k	-s 100k			-f /dev/zero
read		read_zw100k	-s 100k	-w	-f /dev/zero
write		write_t1k	-s 1k			-f $TFILE
write		write_t10k	-s 10k			-f $TFILE
write		write_t100k	-s 100k			-f $TFILE
write		write_u1k	-s 1k			-f $VFILE
write		write_u10k	-s 10k			-f $VFILE
write		write_u100k	-s 100k			-f $VFILE
write		write_n1k	-s 1k	-f /dev/null
write		write_n10k	-s 10k	-f /dev/null
write		write_n100k	-s 100k	-f /dev/null
writev		writev_t1k	-s 1k			-f $TFILE
writev		writev_t10k	-s 10k		-f $TFILE
writev		writev_t100k	-s 100k			-f $TFILE
writev		writev_u1k	-s 1k			-f $VFILE
writev		writev_u10k	-s 10k			-f $VFILE
writev		writev_u100k	-s 100k			-f $VFILE
writev		writev_n1k	-s 1k	-f /dev/null
writev		writev_n10k	-s 10k	-f /dev/null
writev		writev_n100k	-s 100k	-f /dev/null
pread		pread_t1k	-s 1k		-f $TFILE
pread		pread_t10k	-s 10k		-f $TFILE
pread		pread_t100k	-s 100k	-f $TFILE
pread		pread_u1k	-s 1k		-f $VFILE
pread		pread_u10k	-s 10k		-f $VFILE
pread		pread_u100k	-s 100k	-f $VFILE
pread		pread_z1k	-s 1k		-f /dev/zero
pread		pread_z10k	-s 10k		-f /dev/zero
pread		pread_z100k	-s 100k	-f /dev/zero
pread		pread_zw100k	-s 100k	-w	-f /dev/zero
pwrite		pwrite_t1k	-s 1k		-f $TFILE
pwrite		pwrite_t10k	-s 10k		-f $TFILE
pwrite		pwrite_t100k	-s 100k	-f $TFILE
pwrite		pwrite_u1k	-s 1k		-f $VFILE
pwrite		pwrite_u10k	-s 10k		-f $VFILE
pwrite		pwrite_u100k	-s 100k	-f $VFILE
pwrite		pwrite_n1k	-s 1k		-f /dev/null
pwrite		pwrite_n10k	-s 10k		-f /dev/null
pwrite		pwrite_n100k	-s 100k		-f /dev/null
EOT

exit $SHELLPACK_SUCCESS
#### Description libmicro-file
#### Details libmicro-file-bench 5
