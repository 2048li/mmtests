commit fbb26e17a4c026f05a497fc5d584516bad3b6950
Author: David Smith <dsmith@redhat.com>
Date:   Wed Dec 6 14:37:42 2017 -0600

    Fix PR22551 by updating the use of timers for the 4.15 kernel.
    
    * runtime/linux/timer_compatibility.h: New file.
    * runtime/time.c: Update timer callback function parameter type. Update
      timer initialization.
    * runtime/transport/relay_v2.c: Ditto.
    * runtime/transport/transport.c: Ditto.
    * tapset-timers.cxx (timer_derived_probe_group::emit_module_decls):
      Ditto. Handle old and new timer callback interface.
    * runtime/linux/runtime.h: Include timer_compatibility.h instead of timer.h.
    * tapset/linux/scsi.stp: Ditto.

diff --git a/runtime/linux/runtime.h b/runtime/linux/runtime.h
index 9c585a20d41b..df9b74c5cb35 100644
--- a/runtime/linux/runtime.h
+++ b/runtime/linux/runtime.h
@@ -34,7 +34,7 @@
 #include <linux/compat.h>
 #include <linux/sched.h>
 #include <linux/mm.h>
-#include <linux/timer.h>
+#include "timer_compatibility.h"
 #include <linux/delay.h>
 #include <linux/profile.h>
 #include <linux/rcupdate.h>
diff --git a/runtime/linux/timer_compatibility.h b/runtime/linux/timer_compatibility.h
new file mode 100644
index 000000000000..ac03de998287
--- /dev/null
+++ b/runtime/linux/timer_compatibility.h
@@ -0,0 +1,76 @@
+/*
+ * linux/timer.h compatibility defines and inlines
+ * Copyright (C) 2017 Red Hat Inc.
+ *
+ * This file is part of systemtap, and is free software.  You can
+ * redistribute it and/or modify it under the terms of the GNU General
+ * Public License (GPL); either version 2, or (at your option) any
+ * later version.
+ */
+
+#ifndef _TIMER_COMPATIBILITY_H_
+#define _TIMER_COMPATIBILITY_H_
+
+#include <linux/timer.h>
+
+/*
+ * Starting with the 4.15 kernel, the timer interface
+ * changed. Originally, you'd do something like:
+ *
+ *   static void timer_func(unsigned long val);
+ *
+ *   init_timer(&timer);
+ *   timer.expires = jiffies + STP_RELAY_TIMER_INTERVAL;
+ *   timer.function = timer_func;
+ *   timer.data = 0;
+ *   add_timer(&timer);
+ *
+ * The 'data' parameter would get passed to the callback
+ * function. Starting with 4.15, you'd do something like this:
+ *
+ *   static void timer_func(struct timer_list *val);
+ *
+ *   timer_setup(&timer, timer_func, 0);
+ *   timer.expires = jiffies + STP_RELAY_TIMER_INTERVAL;
+ *   add_timer(&timer);
+ *   
+ * With the new code, the timer that caused the callback gets passed
+ * to the timer callback function. The 'data' field has been removed.
+ *
+ * So, we're going to use the new interface. To hide the differences
+ * between the callback function parameter type, we'll define a new
+ * type, 'stp_timer_callback_parameter_t'.
+ *
+ * If code needs to figure out the difference between the old and new
+ * interface, it should test the TIMER_TRACE_FLAGMASK define (which
+ * only exists in the new interface).
+ */
+
+#if defined(TIMER_TRACE_FLAGMASK) 
+/* This is the >= 4.15 kernel interface. */
+
+typedef struct timer_list * stp_timer_callback_parameter_t;
+
+#else
+/* This is the < 4.15 kernel interface. */
+
+typedef unsigned long stp_timer_callback_parameter_t;
+
+/**
+ * timer_setup - prepare a timer for first use
+ * @timer: the timer in question
+ * @callback: the function to call when timer expires
+ * @flags: any TIMER_* flags (note that anything other than 0 is an
+ * 	   error, since this compatibility function can't support any
+ *	   of the TIMER_* flags)
+ */
+#define timer_setup(timer, callback, flags)			\
+	{							\
+		init_timer((timer));				\
+		(timer)->function = callback;			\
+		(timer)->data = 0;				\
+		BUILD_BUG_ON_ZERO((flags) != 0);		\
+	}
+#endif
+
+#endif /* _TIMER_COMPATIBILITY_H_ */
diff --git a/runtime/time.c b/runtime/time.c
index 2e666d54ccac..91ceafa6a81f 100644
--- a/runtime/time.c
+++ b/runtime/time.c
@@ -168,10 +168,10 @@ __stp_time_smp_callback(void *val)
 
 /* The timer callback is in a softIRQ -- interrupts enabled. */
 static void
-__stp_time_timer_callback(unsigned long val)
+__stp_time_timer_callback(stp_timer_callback_parameter_t unused)
 {
     stp_time_t *time =__stp_time_local_update();
-    (void) val;
+    (void) unused;
 
     /* PR6481: make sure IRQs are enabled before resetting the timer
        (IRQs are disabled and then reenabled in
@@ -200,9 +200,8 @@ __stp_init_time(void *info)
     time->freq = __stp_get_freq();
     __stp_time_local_update();
 
-    init_timer(&time->timer);
+    timer_setup(&time->timer, __stp_time_timer_callback, 0);
     time->timer.expires = jiffies + STP_TIME_SYNC_INTERVAL;
-    time->timer.function = __stp_time_timer_callback;
 
 #ifndef STAPCONF_ADD_TIMER_ON
     add_timer(&time->timer);
diff --git a/runtime/transport/relay_v2.c b/runtime/transport/relay_v2.c
index f81d75dfa25c..135951a8e39d 100644
--- a/runtime/transport/relay_v2.c
+++ b/runtime/transport/relay_v2.c
@@ -30,7 +30,7 @@
 #include <linux/debugfs.h>
 #include <linux/mm.h>
 #include <linux/relay.h>
-#include <linux/timer.h>
+#include "../linux/timer_compatibility.h"
 #include "../uidgid_compatibility.h"
 #include "relay_compat.h"
 
@@ -120,7 +120,7 @@ static void __stp_relay_wakeup_readers(struct rchan_buf *buf)
 		wake_up_interruptible(&buf->read_wait);
 }
 
-static void __stp_relay_wakeup_timer(unsigned long val)
+static void __stp_relay_wakeup_timer(stp_timer_callback_parameter_t unused)
 {
 #ifdef STP_BULKMODE
 	int i;
@@ -151,10 +151,8 @@ static void __stp_relay_wakeup_timer(unsigned long val)
 static void __stp_relay_timer_init(void)
 {
 	atomic_set(&_stp_relay_data.wakeup, 0);
-	init_timer(&_stp_relay_data.timer);
+	timer_setup(&_stp_relay_data.timer, __stp_relay_wakeup_timer, 0);
 	_stp_relay_data.timer.expires = jiffies + STP_RELAY_TIMER_INTERVAL;
-	_stp_relay_data.timer.function = __stp_relay_wakeup_timer;
-	_stp_relay_data.timer.data = 0;
 	add_timer(&_stp_relay_data.timer);
 	smp_mb();
 }
diff --git a/runtime/transport/transport.c b/runtime/transport/transport.c
index 3400f220acb9..320fd187e0f1 100644
--- a/runtime/transport/transport.c
+++ b/runtime/transport/transport.c
@@ -311,7 +311,7 @@ static void _stp_detach(void)
 }
 
 
-static void _stp_ctl_work_callback(unsigned long val);
+static void _stp_ctl_work_callback(stp_timer_callback_parameter_t unused);
 
 /*
  * Called when stapio opens the control channel.
@@ -320,13 +320,12 @@ static void _stp_attach(void)
 {
 	dbug_trans(1, "attach\n");
 	_stp_pid = current->pid;
-  if (_stp_namespaces_pid < 1)
-    _stp_namespaces_pid = _stp_pid;
+	if (_stp_namespaces_pid < 1)
+		_stp_namespaces_pid = _stp_pid;
 	_stp_transport_data_fs_overwrite(0);
-	init_timer(&_stp_ctl_work_timer);
+
+	timer_setup(&_stp_ctl_work_timer, _stp_ctl_work_callback, 0);
 	_stp_ctl_work_timer.expires = jiffies + STP_CTL_TIMER_INTERVAL;
-	_stp_ctl_work_timer.function = _stp_ctl_work_callback;
-	_stp_ctl_work_timer.data= 0;
 	add_timer(&_stp_ctl_work_timer);
 }
 
@@ -341,7 +340,7 @@ static void _stp_attach(void)
  *	notified. Reschedules itself if someone is still attached
  *	to the cmd channel.
  */
-static void _stp_ctl_work_callback(unsigned long val)
+static void _stp_ctl_work_callback(stp_timer_callback_parameter_t unused)
 {
 	int do_io = 0;
 	unsigned long flags;
diff --git a/tapset/linux/scsi.stp b/tapset/linux/scsi.stp
index 44f686c2ab10..35779421bac7 100644
--- a/tapset/linux/scsi.stp
+++ b/tapset/linux/scsi.stp
@@ -14,7 +14,7 @@
 #include <scsi/scsi_cmnd.h>
 #include <scsi/scsi_device.h>
 #include <scsi/scsi_host.h>
-#include <linux/timer.h>
+#include "linux/timer_compatibility.h"
 #include <linux/blkdev.h>
 %}
 
